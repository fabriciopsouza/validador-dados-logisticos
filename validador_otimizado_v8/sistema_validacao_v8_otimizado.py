#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Valida√ß√£o de Dados Log√≠sticos - Vers√£o 8.0 Otimizada
Autor: Fabr√≠cio Pinheiro Souza / Analista de Dados S√™nior
Data: 06/06/2025
Vers√£o: 8.0 - Otimizada com Processamento R√°pido/Completo
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import pandas as pd
import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional
import logging
from datetime import datetime
import re
import threading
import subprocess
import shutil
import chardet
import time

# Auto-instala√ß√£o de depend√™ncias
def instalar_dependencias():
    """Instala depend√™ncias automaticamente se necess√°rio"""
    dependencias = [
        'pandas', 'numpy', 'matplotlib', 'seaborn', 
        'chardet', 'openpyxl', 'xlsxwriter'
    ]
    
    for dep in dependencias:
        try:
            __import__(dep)
        except ImportError:
            print(f"üì¶ Instalando {dep}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', dep])

# Instala depend√™ncias na primeira execu√ß√£o
try:
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np
except ImportError:
    print("üîç Verificando depend√™ncias...")
    instalar_dependencias()
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np

class ValidadorLogisticoOtimizado:
    """Sistema de Valida√ß√£o de Dados Log√≠sticos - Vers√£o 8.0 Otimizada"""
    
    def __init__(self):
        """Inicializa o sistema"""
        self.root = None
        self.setup_logging()
        self.inicializar_variaveis()
        self.criar_interface_gui()
        
    def setup_logging(self):
        """Configura sistema de logging funcional"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = log_dir / f"validador_v8_{timestamp}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        logging.info("üöÄ Sistema de Valida√ß√£o v8.0 Otimizado iniciado")
        
    def inicializar_variaveis(self):
        """Inicializa todas as vari√°veis do sistema"""
        # Caminhos e configura√ß√µes
        self.pasta_padrao = Path.home() / "Documents" / "ValidadorLogistico"
        self.template_excel_path = None
        self.dados_brutos_path = None
        self.pasta_saida = None
        
        # Dados de an√°lise
        self.campos_obrigatorios = {}
        self.bases_detectadas = []
        self.resultados_validacao = {}
        self.inconsistencias_nomenclatura = {}
        
        # Configura√ß√µes de processamento
        self.modo_processamento = "rapido"  # "rapido" ou "completo"
        
        # Interface
        self.notebook = None
        self.progress_var = None
        self.progress_bar = None
        self.status_text = None
        self.tree_bases = None
        self.tree_inconsistencias = None
        
    def criar_interface_gui(self):
        """Cria interface gr√°fica amig√°vel com guia visual"""
        self.root = tk.Tk()
        self.root.title("Sistema de Valida√ß√£o de Dados Log√≠sticos v8.0 - Otimizado")
        self.root.geometry("1500x950")
        self.root.configure(bg='#f0f0f0')
        
        # Estilo
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configurar cores para prioridades
        style.configure('Obrigatorio.TButton', background='#e74c3c', foreground='white')
        style.configure('Recomendado.TButton', background='#f39c12', foreground='white')
        style.configure('Opcional.TButton', background='#27ae60', foreground='white')
        style.configure('Avancado.TButton', background='#95a5a6', foreground='white')
        
        # T√≠tulo principal
        titulo_frame = tk.Frame(self.root, bg='#2c3e50', height=100)
        titulo_frame.pack(fill='x', pady=(0,10))
        titulo_frame.pack_propagate(False)
        
        titulo_label = tk.Label(
            titulo_frame, 
            text="‚ö° Sistema de Valida√ß√£o de Dados Log√≠sticos v8.0 - OTIMIZADO",
            font=('Arial', 18, 'bold'),
            fg='white',
            bg='#2c3e50'
        )
        titulo_label.pack(expand=True)
        
        subtitulo_label = tk.Label(
            titulo_frame,
            text="üöÄ Processamento R√°pido ‚Ä¢ üìä An√°lise Completa ‚Ä¢ üéØ Guia Visual de Prioridades",
            font=('Arial', 10),
            fg='#ecf0f1',
            bg='#2c3e50'
        )
        subtitulo_label.pack()
        
        # Guia de prioridades
        self.criar_guia_prioridades()
        
        # Notebook para abas
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Criar abas
        self.criar_aba_configuracao()
        self.criar_aba_processamento()
        self.criar_aba_relatorios()
        self.criar_aba_logs()
        
        # Barra de status
        self.criar_barra_status()
        
    def criar_guia_prioridades(self):
        """Cria guia visual de prioridades dos bot√µes"""
        guia_frame = tk.Frame(self.root, bg='#ecf0f1', height=60)
        guia_frame.pack(fill='x', padx=10, pady=(0,5))
        guia_frame.pack_propagate(False)
        
        tk.Label(guia_frame, text="üéØ GUIA DE PRIORIDADES:", 
                font=('Arial', 10, 'bold'), bg='#ecf0f1').pack(side='left', padx=10)
        
        # Legendas coloridas
        cores_prioridades = [
            ("üî¥ OBRIGAT√ìRIO", "#e74c3c", "Clique primeiro"),
            ("üü° RECOMENDADO", "#f39c12", "Para melhores resultados"),
            ("üü¢ OPCIONAL", "#27ae60", "Pode pular se quiser rapidez"),
            ("‚ö™ AVAN√áADO", "#95a5a6", "Apenas se precisar de detalhes")
        ]
        
        for texto, cor, tooltip in cores_prioridades:
            label = tk.Label(guia_frame, text=texto, bg=cor, fg='white', 
                           font=('Arial', 8, 'bold'), padx=8, pady=2)
            label.pack(side='left', padx=5)
            
    def criar_aba_configuracao(self):
        """Cria aba de configura√ß√£o com prioridades visuais"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üî¥ 1. Configura√ß√£o (OBRIGAT√ìRIO)")
        
        # Instru√ß√µes claras
        instrucoes_frame = tk.Frame(frame, bg='#e8f4fd', relief='solid', bd=1)
        instrucoes_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(instrucoes_frame, 
                text="üìã PASSO 1: Configure o template Excel e localiza√ß√£o dos dados (OBRIGAT√ìRIO)",
                font=('Arial', 12, 'bold'), bg='#e8f4fd', fg='#2c3e50').pack(pady=10)
        
        # Se√ß√£o Template Excel
        template_frame = ttk.LabelFrame(frame, text="üìã Template Excel com Campos Obrigat√≥rios", padding=15)
        template_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(template_frame, text="Selecione o arquivo Excel que cont√©m os campos obrigat√≥rios preenchidos:", 
                 font=('Arial', 10)).pack(anchor='w', pady=(0,5))
        
        template_path_frame = ttk.Frame(template_frame)
        template_path_frame.pack(fill='x', pady=5)
        
        self.template_path_var = tk.StringVar()
        template_entry = ttk.Entry(template_path_frame, textvariable=self.template_path_var, 
                                 width=80, font=('Arial', 9))
        template_entry.pack(side='left', fill='x', expand=True, padx=(0,10))
        
        ttk.Button(template_path_frame, text="üìÇ Procurar", 
                  command=self.selecionar_template, style='Obrigatorio.TButton').pack(side='right')
        
        ttk.Button(template_frame, text="üî¥ Analisar Template (OBRIGAT√ìRIO)", 
                  command=self.analisar_template, style='Obrigatorio.TButton').pack(pady=10)
        
        # Se√ß√£o Dados Brutos
        dados_frame = ttk.LabelFrame(frame, text="üìä Localiza√ß√£o dos Dados Brutos", padding=15)
        dados_frame.pack(fill='x', padx=20, pady=10)
        
        # Op√ß√µes de localiza√ß√£o
        self.dados_opcao_var = tk.StringVar(value="padrao")
        
        ttk.Radiobutton(dados_frame, text="üìÅ Usar pasta padr√£o (Recomendado)", 
                       variable=self.dados_opcao_var, value="padrao",
                       command=self.atualizar_opcao_dados).pack(anchor='w', pady=5)
        
        self.pasta_padrao_label = tk.Label(dados_frame, 
                                          text=f"üìÇ {self.pasta_padrao / 'dados_entrada'}",
                                          font=('Arial', 9), fg='#7f8c8d')
        self.pasta_padrao_label.pack(anchor='w', padx=20)
        
        ttk.Button(dados_frame, text="üìÅ Abrir Pasta Padr√£o", 
                  command=self.abrir_pasta_padrao, style='Recomendado.TButton').pack(anchor='w', padx=20, pady=5)
        
        ttk.Radiobutton(dados_frame, text="üéØ Selecionar pasta personalizada", 
                       variable=self.dados_opcao_var, value="personalizada",
                       command=self.atualizar_opcao_dados).pack(anchor='w', pady=(10,5))
        
        dados_path_frame = ttk.Frame(dados_frame)
        dados_path_frame.pack(fill='x', pady=5, padx=20)
        
        self.dados_path_var = tk.StringVar()
        self.dados_entry = ttk.Entry(dados_path_frame, textvariable=self.dados_path_var, 
                                   width=70, font=('Arial', 9), state='disabled')
        self.dados_entry.pack(side='left', fill='x', expand=True, padx=(0,10))
        
        self.dados_browse_btn = ttk.Button(dados_path_frame, text="üìÇ Procurar", 
                                         command=self.selecionar_dados, state='disabled')
        self.dados_browse_btn.pack(side='right')
        
        # Bot√£o de detec√ß√£o
        ttk.Button(dados_frame, text="üî¥ Detectar Bases Dispon√≠veis (OBRIGAT√ìRIO)", 
                  command=self.detectar_bases, style='Obrigatorio.TButton').pack(pady=15)
        
    def criar_aba_processamento(self):
        """Cria aba de processamento com op√ß√µes r√°pido/completo"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üü° 2. Processamento (RECOMENDADO)")
        
        # Instru√ß√µes
        instrucoes_frame = tk.Frame(frame, bg='#fff3cd', relief='solid', bd=1)
        instrucoes_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(instrucoes_frame, 
                text="‚ö° PASSO 2: Escolha o tipo de processamento (RECOMENDADO: R√°pido)",
                font=('Arial', 12, 'bold'), bg='#fff3cd', fg='#856404').pack(pady=10)
        
        # Op√ß√µes de processamento
        processamento_frame = ttk.LabelFrame(frame, text="‚ö° Modo de Processamento", padding=15)
        processamento_frame.pack(fill='x', padx=20, pady=10)
        
        self.modo_var = tk.StringVar(value="rapido")
        
        # Modo R√°pido
        rapido_frame = tk.Frame(processamento_frame, bg='#d4edda', relief='solid', bd=1)
        rapido_frame.pack(fill='x', pady=5)
        
        ttk.Radiobutton(rapido_frame, text="‚ö° PROCESSAMENTO R√ÅPIDO (Recomendado - Segundos)", 
                       variable=self.modo_var, value="rapido").pack(anchor='w', padx=10, pady=5)
        
        tk.Label(rapido_frame, text="‚úÖ Valida√ß√£o de campos obrigat√≥rios\n"
                                   "‚úÖ Detec√ß√£o de inconsist√™ncias de nomenclatura\n"
                                   "‚úÖ Relat√≥rio por base\n"
                                   "‚úÖ Tabelas Excel (campos obrigat√≥rios + inconsist√™ncias)",
                bg='#d4edda', font=('Arial', 9), justify='left').pack(anchor='w', padx=30, pady=(0,10))
        
        # Modo Completo
        completo_frame = tk.Frame(processamento_frame, bg='#f8d7da', relief='solid', bd=1)
        completo_frame.pack(fill='x', pady=5)
        
        ttk.Radiobutton(completo_frame, text="üìä PROCESSAMENTO COMPLETO (Opcional - Minutos)", 
                       variable=self.modo_var, value="completo").pack(anchor='w', padx=10, pady=5)
        
        tk.Label(completo_frame, text="‚úÖ Tudo do Modo R√°pido +\n"
                                     "üìà Resumo estat√≠stico detalhado\n"
                                     "üìä Gr√°ficos e visualiza√ß√µes\n"
                                     "üîç An√°lises avan√ßadas",
                bg='#f8d7da', font=('Arial', 9), justify='left').pack(anchor='w', padx=30, pady=(0,10))
        
        # Bot√µes de processamento
        botoes_frame = ttk.Frame(processamento_frame)
        botoes_frame.pack(fill='x', pady=15)
        
        ttk.Button(botoes_frame, text="üü° Processar Todas as Bases (RECOMENDADO)", 
                  command=self.processar_todas_bases, style='Recomendado.TButton').pack(side='left', padx=(0,10))
        
        ttk.Button(botoes_frame, text="üéØ Processar Base Espec√≠fica", 
                  command=self.processar_base_especifica, style='Opcional.TButton').pack(side='left')
        
        # Progresso
        progress_frame = ttk.LabelFrame(frame, text="üìä Progresso do Processamento", padding=10)
        progress_frame.pack(fill='x', padx=20, pady=10)
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, 
                                          maximum=100, length=400)
        self.progress_bar.pack(pady=10)
        
        self.progress_label = tk.Label(progress_frame, text="Aguardando processamento...", 
                                     font=('Arial', 10))
        self.progress_label.pack()
        
        # Resultados
        resultados_frame = ttk.LabelFrame(frame, text="üìã Bases Detectadas e Status", padding=10)
        resultados_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        colunas = ('Base', 'Status', 'Arquivos V√°lidos', 'Total Arquivos', 'Observa√ß√µes')
        self.tree_bases = ttk.Treeview(resultados_frame, columns=colunas, show='headings', height=10)
        
        for col in colunas:
            self.tree_bases.heading(col, text=col)
            self.tree_bases.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(resultados_frame, orient='vertical', command=self.tree_bases.yview)
        self.tree_bases.configure(yscrollcommand=scrollbar.set)
        
        self.tree_bases.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
    def criar_aba_relatorios(self):
        """Cria aba de relat√≥rios"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üü° 3. Relat√≥rios (RECOMENDADO)")
        
        # Instru√ß√µes
        instrucoes_frame = tk.Frame(frame, bg='#fff3cd', relief='solid', bd=1)
        instrucoes_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(instrucoes_frame, 
                text="üìã PASSO 3: Gere relat√≥rios Excel para an√°lise (RECOMENDADO)",
                font=('Arial', 12, 'bold'), bg='#fff3cd', fg='#856404').pack(pady=10)
        
        # Controles de relat√≥rios
        controles_frame = ttk.LabelFrame(frame, text="üìä Gera√ß√£o de Relat√≥rios", padding=15)
        controles_frame.pack(fill='x', padx=20, pady=10)
        
        botoes_rel_frame = ttk.Frame(controles_frame)
        botoes_rel_frame.pack(fill='x', pady=10)
        
        ttk.Button(botoes_rel_frame, text="üü° Tabela Campos Obrigat√≥rios (Excel)", 
                  command=self.gerar_tabela_campos_obrigatorios, 
                  style='Recomendado.TButton').pack(side='left', padx=(0,10))
        
        ttk.Button(botoes_rel_frame, text="üü° Tabela Inconsist√™ncias (Excel)", 
                  command=self.gerar_tabela_inconsistencias,
                  style='Recomendado.TButton').pack(side='left', padx=(0,10))
        
        ttk.Button(botoes_rel_frame, text="üü¢ Gr√°ficos e Estat√≠sticas (OPCIONAL)", 
                  command=self.gerar_graficos_estatisticas,
                  style='Opcional.TButton').pack(side='left')
        
        # Bot√µes de abertura de pastas
        pastas_frame = ttk.Frame(controles_frame)
        pastas_frame.pack(fill='x', pady=10)
        
        ttk.Button(pastas_frame, text="üìÅ Abrir Pasta de Resultados", 
                  command=self.abrir_pasta_resultados,
                  style='Recomendado.TButton').pack(side='left', padx=(0,10))
        
        ttk.Button(pastas_frame, text="üìÅ Abrir Pasta de Logs", 
                  command=self.abrir_pasta_logs,
                  style='Opcional.TButton').pack(side='left')
        
        # Inconsist√™ncias detectadas
        inconsistencias_frame = ttk.LabelFrame(frame, text="‚ö†Ô∏è Inconsist√™ncias de Nomenclatura Detectadas", padding=10)
        inconsistencias_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        colunas_inc = ('Arquivo', 'Campo Obrigat√≥rio', 'Varia√ß√£o Encontrada', 'Bases Afetadas', 'Tipo Problema')
        self.tree_inconsistencias = ttk.Treeview(inconsistencias_frame, columns=colunas_inc, show='headings', height=15)
        
        for col in colunas_inc:
            self.tree_inconsistencias.heading(col, text=col)
            self.tree_inconsistencias.column(col, width=180)
        
        scrollbar_inc = ttk.Scrollbar(inconsistencias_frame, orient='vertical', command=self.tree_inconsistencias.yview)
        self.tree_inconsistencias.configure(yscrollcommand=scrollbar_inc.set)
        
        self.tree_inconsistencias.pack(side='left', fill='both', expand=True)
        scrollbar_inc.pack(side='right', fill='y')
        
    def criar_aba_logs(self):
        """Cria aba de logs"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="‚ö™ 4. Logs (AVAN√áADO)")
        
        # Instru√ß√µes
        instrucoes_frame = tk.Frame(frame, bg='#e2e3e5', relief='solid', bd=1)
        instrucoes_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(instrucoes_frame, 
                text="üìù PASSO 4: Monitore logs detalhados (AVAN√áADO - Pode pular)",
                font=('Arial', 12, 'bold'), bg='#e2e3e5', fg='#6c757d').pack(pady=10)
        
        # Controles de logs
        controles_logs = ttk.Frame(frame)
        controles_logs.pack(fill='x', padx=20, pady=10)
        
        ttk.Button(controles_logs, text="üîÑ Atualizar Logs", 
                  command=self.atualizar_logs, style='Avancado.TButton').pack(side='left', padx=(0,10))
        ttk.Button(controles_logs, text="üóëÔ∏è Limpar Logs", 
                  command=self.limpar_logs, style='Avancado.TButton').pack(side='left', padx=(0,10))
        ttk.Button(controles_logs, text="üíæ Exportar Logs", 
                  command=self.exportar_logs, style='Avancado.TButton').pack(side='left')
        
        # √Årea de logs
        logs_frame = ttk.LabelFrame(frame, text="üìã Logs do Sistema", padding=10)
        logs_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        self.logs_text = scrolledtext.ScrolledText(logs_frame, height=20, font=('Consolas', 9))
        self.logs_text.pack(fill='both', expand=True)
        
    def criar_barra_status(self):
        """Cria barra de status"""
        status_frame = tk.Frame(self.root, bg='#34495e', height=30)
        status_frame.pack(fill='x', side='bottom')
        status_frame.pack_propagate(False)
        
        self.status_label = tk.Label(status_frame, text="Sistema iniciado - Configure o template Excel primeiro", 
                                   bg='#34495e', fg='white', font=('Arial', 9))
        self.status_label.pack(side='left', padx=10, pady=5)
        
        # Indicador de modo
        self.modo_label = tk.Label(status_frame, text="Modo: R√°pido", 
                                 bg='#27ae60', fg='white', font=('Arial', 9, 'bold'), padx=10)
        self.modo_label.pack(side='right', padx=10, pady=2)
        
    def log_status(self, mensagem: str, nivel: str = "INFO"):
        """Registra status no log e interface"""
        if nivel == "ERROR":
            logging.error(mensagem)
        else:
            logging.info(mensagem)
            
        # Atualiza interface
        if hasattr(self, 'status_label'):
            self.status_label.config(text=mensagem)
            
        if hasattr(self, 'logs_text'):
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.logs_text.insert(tk.END, f"[{timestamp}] {mensagem}\n")
            self.logs_text.see(tk.END)
            
        self.root.update_idletasks()
        
    def atualizar_opcao_dados(self):
        """Atualiza op√ß√µes de localiza√ß√£o de dados"""
        if self.dados_opcao_var.get() == "padrao":
            self.dados_entry.config(state='disabled')
            self.dados_browse_btn.config(state='disabled')
            self.dados_path_var.set(str(self.pasta_padrao / "dados_entrada"))
        else:
            self.dados_entry.config(state='normal')
            self.dados_browse_btn.config(state='normal')
            
    def abrir_pasta_padrao(self):
        """Abre pasta padr√£o e cria se necess√°rio"""
        pasta_dados = self.pasta_padrao / "dados_entrada"
        pasta_dados.mkdir(parents=True, exist_ok=True)
        
        try:
            if sys.platform == "win32":
                os.startfile(pasta_dados)
            elif sys.platform == "darwin":
                subprocess.run(["open", pasta_dados])
            else:
                subprocess.run(["xdg-open", pasta_dados])
                
            self.log_status(f"üìÅ Pasta padr√£o aberta: {pasta_dados}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir pasta:\n{e}")
            
    def selecionar_template(self):
        """Seleciona arquivo template Excel"""
        arquivo = filedialog.askopenfilename(
            title="Selecionar Template Excel",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        if arquivo:
            self.template_path_var.set(arquivo)
            self.template_excel_path = Path(arquivo)
            self.log_status(f"üìã Template selecionado: {arquivo}")
            
    def selecionar_dados(self):
        """Seleciona pasta de dados"""
        pasta = filedialog.askdirectory(title="Selecionar Pasta de Dados")
        if pasta:
            self.dados_path_var.set(pasta)
            self.log_status(f"üìä Pasta de dados selecionada: {pasta}")
            
    def analisar_template(self):
        """Analisa template Excel para identificar campos obrigat√≥rios"""
        if not self.template_excel_path or not self.template_excel_path.exists():
            messagebox.showerror("Erro", "Selecione um arquivo template Excel v√°lido primeiro!")
            return
            
        try:
            self.log_status("üîç Analisando template Excel...")
            
            # Mapear abas Excel para arquivos CSV
            mapeamento_abas = {
                'Agendamentos': 'agend.csv',
                'Ve√≠culos': 'Veiculos.csv',
                'Produtos': 'produtos.csv',
                'P√°tios': 'patios.csv',
                'Ilhas': 'ilhas.csv',
                'Baias': 'baias.csv',
                'Bra√ßos-Produtos': 'bracos-produtos.csv',
                'Grades': 'grades.csv',
                'Grades-Clientes': 'grades-clientes.csv',
                'Grades-Produtos': 'grades-produtos.csv',
                'Grades-Clientes-Produtos': 'grades-clientes-produtos.csv',
                'Grades-Cotas-Clientes': 'grades-cotas-clientes.csv',
                'Grades-Cotas-Produtos': 'grades-cotas-produtos.csv',
                'Grades-Fixa√ß√£o-Hor√°rios': 'grades-fixacao-horarios.csv',
                'Hor√°rios-P√°tios': 'horarios-patios.csv',
                'Produtos-Agend': 'produtos-agend.csv',
                'EV': 'EV.csv',
                'Vaz√£o-Ilhas': 'vazao-ilhas.csv'
            }
            
            self.campos_obrigatorios = {}
            
            # L√™ arquivo Excel
            excel_file = pd.ExcelFile(self.template_excel_path)
            
            for aba, arquivo_csv in mapeamento_abas.items():
                if aba in excel_file.sheet_names:
                    df = pd.read_excel(self.template_excel_path, sheet_name=aba)
                    
                    # Identifica campos com dados (n√£o vazios)
                    campos_com_dados = []
                    for coluna in df.columns:
                        if not df[coluna].isna().all() and not (df[coluna] == '').all():
                            campos_com_dados.append(coluna)
                    
                    self.campos_obrigatorios[arquivo_csv] = campos_com_dados
                    self.log_status(f"‚úÖ {arquivo_csv}: {len(campos_com_dados)} campos obrigat√≥rios")
                else:
                    self.campos_obrigatorios[arquivo_csv] = []
                    self.log_status(f"‚ö†Ô∏è Aba '{aba}' n√£o encontrada no template")
            
            total_campos = sum(len(campos) for campos in self.campos_obrigatorios.values())
            arquivos_com_campos = len([arq for arq, campos in self.campos_obrigatorios.items() if len(campos) > 0])
            
            self.log_status(f"‚úÖ Template analisado com sucesso!")
            self.log_status(f"üìä {total_campos} campos obrigat√≥rios em {arquivos_com_campos} arquivos")
            
            messagebox.showinfo("Sucesso", f"Template analisado com sucesso!\n\n"
                               f"‚Ä¢ {total_campos} campos obrigat√≥rios encontrados\n"
                               f"‚Ä¢ {arquivos_com_campos} arquivos com campos obrigat√≥rios\n"
                               f"‚Ä¢ {len(self.campos_obrigatorios)} arquivos mapeados")
            
        except Exception as e:
            self.log_status(f"‚ùå Erro ao analisar template: {e}", "ERROR")
            messagebox.showerror("Erro", f"Erro ao analisar template:\n{e}")
            
    def detectar_bases(self):
        """Detecta bases dispon√≠veis"""
        if self.dados_opcao_var.get() == "padrao":
            diretorio = Path(self.dados_path_var.get())
        else:
            diretorio = Path(self.dados_path_var.get()) if self.dados_path_var.get() else None
            
        if not diretorio or not diretorio.exists():
            messagebox.showerror("Erro", f"Diret√≥rio n√£o encontrado:\n{diretorio}")
            return
            
        try:
            self.log_status("üéØ Detectando bases dispon√≠veis...")
            
            bases = set()
            
            # Estrutura 1: BASE-arquivo.csv
            for arquivo in diretorio.glob("*.csv"):
                if '-' in arquivo.name:
                    base = arquivo.name.split('-')[0]
                    if self._verificar_base_valida(diretorio, base):
                        bases.add(base)
            
            # Estrutura 2: \\BASE\arquivo.csv
            for pasta in diretorio.iterdir():
                if pasta.is_dir():
                    if self._verificar_pasta_base_valida(pasta):
                        bases.add(pasta.name)
            
            self.bases_detectadas = sorted(list(bases))
            
            if self.bases_detectadas:
                self.log_status(f"‚úÖ {len(self.bases_detectadas)} bases detectadas: {', '.join(self.bases_detectadas)}")
                messagebox.showinfo("Bases Detectadas", 
                                   f"{len(self.bases_detectadas)} bases encontradas:\n\n" + 
                                   "\n".join([f"‚Ä¢ {base}" for base in self.bases_detectadas]))
                self._atualizar_tree_bases()
            else:
                self.log_status("‚ö†Ô∏è Nenhuma base detectada")
                messagebox.showwarning("Aviso", "Nenhuma base foi detectada no diret√≥rio especificado.")
                
        except Exception as e:
            self.log_status(f"‚ùå Erro ao detectar bases: {e}", "ERROR")
            messagebox.showerror("Erro", f"Erro ao detectar bases:\n{e}")
            
    def _verificar_base_valida(self, diretorio: Path, base: str) -> bool:
        """Verifica se uma base √© v√°lida (tem arquivos suficientes)"""
        arquivos_base = list(diretorio.glob(f"{base}-*.csv"))
        return len(arquivos_base) >= 5  # M√≠nimo de 5 arquivos para ser considerada base v√°lida
        
    def _verificar_pasta_base_valida(self, pasta: Path) -> bool:
        """Verifica se uma pasta cont√©m uma base v√°lida"""
        arquivos_csv = list(pasta.glob("*.csv"))
        return len(arquivos_csv) >= 5  # M√≠nimo de 5 arquivos CSV
        
    def _atualizar_tree_bases(self):
        """Atualiza tree view com bases detectadas"""
        # Limpa tree
        for item in self.tree_bases.get_children():
            self.tree_bases.delete(item)
            
        # Adiciona bases
        for base in self.bases_detectadas:
            self.tree_bases.insert('', 'end', values=(base, 'Detectada', '-', '-', 'Aguardando processamento'))
            
    def processar_todas_bases(self):
        """Processa todas as bases detectadas"""
        if not self.bases_detectadas:
            messagebox.showerror("Erro", "Nenhuma base detectada! Execute a detec√ß√£o primeiro.")
            return
            
        if not self.campos_obrigatorios:
            messagebox.showerror("Erro", "Template n√£o analisado! Analise o template Excel primeiro.")
            return
            
        # Atualiza modo de processamento
        self.modo_processamento = self.modo_var.get()
        
        if self.modo_processamento == "rapido":
            self.modo_label.config(text="Modo: R√°pido ‚ö°", bg='#27ae60')
        else:
            self.modo_label.config(text="Modo: Completo üìä", bg='#e74c3c')
            
        # Executa processamento em thread separada
        thread = threading.Thread(target=self._processar_bases_thread)
        thread.daemon = True
        thread.start()
        
    def _processar_bases_thread(self):
        """Thread para processamento das bases"""
        try:
            total_bases = len(self.bases_detectadas)
            
            for i, base in enumerate(self.bases_detectadas):
                self.log_status(f"üîÑ Processando base {base} ({i+1}/{total_bases})...")
                
                # Atualiza progresso
                progresso = (i / total_bases) * 100
                self.progress_var.set(progresso)
                self.progress_label.config(text=f"Processando {base}... ({i+1}/{total_bases})")
                
                # Processa base
                if self.modo_processamento == "rapido":
                    resultado = self._processar_base_rapido(base)
                else:
                    resultado = self._processar_base_completo(base)
                    
                self.resultados_validacao[base] = resultado
                
                # Atualiza tree
                self._atualizar_resultado_tree(base, resultado)
                
                # Pequena pausa para feedback visual
                time.sleep(0.5)
                
            # Finaliza processamento
            self.progress_var.set(100)
            self.progress_label.config(text="‚úÖ Processamento conclu√≠do!")
            
            # Detecta inconsist√™ncias
            self._detectar_inconsistencias_nomenclatura()
            
            self.log_status("‚úÖ Todas as bases foram processadas com sucesso!")
            
            # Mostra resumo
            self._mostrar_resumo_processamento()
            
        except Exception as e:
            self.log_status(f"‚ùå Erro durante processamento: {e}", "ERROR")
            messagebox.showerror("Erro", f"Erro durante processamento:\n{e}")
            
    def _processar_base_rapido(self, base: str) -> Dict:
        """Processamento r√°pido - apenas valida√ß√£o essencial"""
        diretorio = Path(self.dados_path_var.get())
        
        resultado = {
            'base': base,
            'arquivos_processados': 0,
            'arquivos_validos': 0,
            'total_arquivos': len(self.campos_obrigatorios),
            'problemas': [],
            'campos_faltantes': {},
            'tempo_processamento': 0
        }
        
        inicio = time.time()
        
        # Cria pasta de sa√≠da
        pasta_base = self.pasta_padrao / "output" / base
        pasta_input = pasta_base / "input"
        pasta_input.mkdir(parents=True, exist_ok=True)
        
        # Processa cada arquivo
        for arquivo_csv, campos_obrigatorios in self.campos_obrigatorios.items():
            try:
                arquivo_original = self._encontrar_arquivo_original(diretorio, base, arquivo_csv)
                
                if arquivo_original:
                    # Copia arquivo preservando encoding
                    arquivo_destino = pasta_input / arquivo_csv
                    self._copiar_arquivo_preservando_encoding(arquivo_original, arquivo_destino)
                    
                    # Cria vazao-ilhas.csv se for ilhas.csv
                    if arquivo_csv == "ilhas.csv":
                        self._criar_vazao_ilhas(arquivo_destino, pasta_input)
                    
                    # Valida√ß√£o r√°pida de campos obrigat√≥rios
                    if campos_obrigatorios:
                        campos_faltantes = self._validar_campos_rapido(arquivo_destino, campos_obrigatorios)
                        if campos_faltantes:
                            resultado['campos_faltantes'][arquivo_csv] = campos_faltantes
                        else:
                            resultado['arquivos_validos'] += 1
                    else:
                        resultado['arquivos_validos'] += 1
                        
                    resultado['arquivos_processados'] += 1
                    
                else:
                    resultado['problemas'].append(f"Arquivo {arquivo_csv} n√£o encontrado")
                    
            except Exception as e:
                resultado['problemas'].append(f"Erro ao processar {arquivo_csv}: {e}")
        
        resultado['tempo_processamento'] = time.time() - inicio
        
        # Gera relat√≥rio r√°pido
        self._gerar_relatorio_rapido(resultado, pasta_base)
        
        return resultado
        
    def _processar_base_completo(self, base: str) -> Dict:
        """Processamento completo - com estat√≠sticas e an√°lises"""
        # Primeiro faz processamento r√°pido
        resultado = self._processar_base_rapido(base)
        
        # Adiciona an√°lises estat√≠sticas
        inicio_stats = time.time()
        
        pasta_base = self.pasta_padrao / "output" / base
        pasta_input = pasta_base / "input"
        
        resultado['estatisticas'] = {}
        resultado['graficos_gerados'] = []
        
        # An√°lise estat√≠stica de cada arquivo
        for arquivo_csv in self.campos_obrigatorios.keys():
            arquivo_path = pasta_input / arquivo_csv
            if arquivo_path.exists():
                try:
                    stats = self._analisar_estatisticas_arquivo(arquivo_path)
                    resultado['estatisticas'][arquivo_csv] = stats
                except Exception as e:
                    self.log_status(f"‚ö†Ô∏è Erro ao analisar estat√≠sticas de {arquivo_csv}: {e}")
        
        # Gera gr√°ficos se solicitado
        if resultado['estatisticas']:
            try:
                graficos = self._gerar_graficos_base(resultado, pasta_base)
                resultado['graficos_gerados'] = graficos
            except Exception as e:
                self.log_status(f"‚ö†Ô∏è Erro ao gerar gr√°ficos: {e}")
        
        resultado['tempo_estatisticas'] = time.time() - inicio_stats
        
        # Gera relat√≥rio completo
        self._gerar_relatorio_completo(resultado, pasta_base)
        
        return resultado
        
    def _validar_campos_rapido(self, arquivo_path: Path, campos_obrigatorios: List[str]) -> List[str]:
        """Valida√ß√£o r√°pida de campos obrigat√≥rios"""
        try:
            # Detecta encoding
            with open(arquivo_path, 'rb') as f:
                raw_data = f.read(1024)
                encoding = chardet.detect(raw_data)['encoding'] or 'utf-8'
            
            # L√™ apenas o cabe√ßalho
            df = pd.read_csv(arquivo_path, encoding=encoding, nrows=0)
            colunas_existentes = set(df.columns)
            
            # Verifica campos faltantes
            campos_faltantes = []
            for campo in campos_obrigatorios:
                if campo not in colunas_existentes:
                    # Verifica varia√ß√µes de nomenclatura
                    campo_encontrado = False
                    for coluna in colunas_existentes:
                        if self._campos_similares(campo, coluna):
                            campo_encontrado = True
                            break
                    
                    if not campo_encontrado:
                        campos_faltantes.append(campo)
            
            return campos_faltantes
            
        except Exception as e:
            return [f"Erro ao validar: {e}"]
            
    def _campos_similares(self, campo1: str, campo2: str) -> bool:
        """Verifica se dois campos s√£o similares (poss√≠vel inconsist√™ncia de nomenclatura)"""
        # Remove espa√ßos e converte para min√∫sculas
        c1 = re.sub(r'\s+', '', campo1.lower())
        c2 = re.sub(r'\s+', '', campo2.lower())
        
        # Verifica se s√£o iguais sem espa√ßos
        if c1 == c2:
            return True
            
        # Verifica outras varia√ß√µes comuns
        varia√ß√µes = [
            (r'[√°√†√¢√£]', 'a'), (r'[√©√®√™]', 'e'), (r'[√≠√¨]', 'i'),
            (r'[√≥√≤√¥√µ]', 'o'), (r'[√∫√π]', 'u'), (r'√ß', 'c')
        ]
        
        for padrao, substituto in varia√ß√µes:
            c1 = re.sub(padrao, substituto, c1)
            c2 = re.sub(padrao, substituto, c2)
        
        return c1 == c2
        
    def _encontrar_arquivo_original(self, diretorio: Path, base: str, arquivo_csv: str) -> Optional[Path]:
        """Encontra arquivo original da base"""
        # Estrutura 1: BASE-arquivo.csv
        arquivo_prefixo = diretorio / f"{base}-{arquivo_csv}"
        if arquivo_prefixo.exists():
            return arquivo_prefixo
            
        # Estrutura 2: \\BASE\arquivo.csv
        arquivo_pasta = diretorio / base / arquivo_csv
        if arquivo_pasta.exists():
            return arquivo_pasta
            
        return None
        
    def _copiar_arquivo_preservando_encoding(self, origem: Path, destino: Path):
        """Copia arquivo preservando encoding original"""
        try:
            # Detecta encoding
            with open(origem, 'rb') as f:
                raw_data = f.read()
                encoding = chardet.detect(raw_data)['encoding'] or 'utf-8'
            
            # L√™ com encoding detectado
            with open(origem, 'r', encoding=encoding) as f:
                conteudo = f.read()
            
            # Salva com mesmo encoding
            with open(destino, 'w', encoding=encoding, newline='') as f:
                f.write(conteudo)
                
        except Exception as e:
            # Fallback: copia bin√°rio
            shutil.copy2(origem, destino)
            
    def _criar_vazao_ilhas(self, arquivo_ilhas: Path, pasta_destino: Path):
        """Cria arquivo vazao-ilhas.csv a partir de ilhas.csv"""
        try:
            # Detecta encoding
            with open(arquivo_ilhas, 'rb') as f:
                raw_data = f.read(1024)
                encoding = chardet.detect(raw_data)['encoding'] or 'utf-8'
            
            # L√™ arquivo ilhas
            df = pd.read_csv(arquivo_ilhas, encoding=encoding)
            
            # Cria vazao-ilhas com estrutura espec√≠fica
            if 'VazaoMaxima(p95)' in df.columns:
                vazao_df = df[['Codigo', 'DescricaoPatio', 'VazaoMaxima(p95)']].copy()
                
                # Remove coluna VazaoMaxima(p95) do arquivo ilhas original
                df_ilhas_sem_vazao = df.drop('VazaoMaxima(p95)', axis=1)
                df_ilhas_sem_vazao.to_csv(arquivo_ilhas, index=False, encoding=encoding)
                
                # Salva vazao-ilhas
                vazao_path = pasta_destino / "vazao-ilhas.csv"
                vazao_df.to_csv(vazao_path, index=False, encoding=encoding)
                
                self.log_status(f"‚úÖ Arquivo vazao-ilhas.csv criado com {len(vazao_df)} registros")
            else:
                self.log_status("‚ö†Ô∏è Coluna VazaoMaxima(p95) n√£o encontrada em ilhas.csv")
                
        except Exception as e:
            self.log_status(f"‚ùå Erro ao criar vazao-ilhas.csv: {e}")
            
    def _gerar_relatorio_rapido(self, resultado: Dict, pasta_base: Path):
        """Gera relat√≥rio r√°pido da base"""
        relatorio_path = pasta_base / f"relatorio_validacao_{resultado['base']}.md"
        
        with open(relatorio_path, 'w', encoding='utf-8') as f:
            f.write(f"# Relat√≥rio de Valida√ß√£o - Base {resultado['base']}\n\n")
            f.write(f"**Data:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"**Modo:** Processamento R√°pido ‚ö°\n")
            f.write(f"**Tempo:** {resultado['tempo_processamento']:.2f} segundos\n\n")
            
            f.write("## üìä Resumo Executivo\n\n")
            f.write(f"- **Arquivos Processados:** {resultado['arquivos_processados']}/{resultado['total_arquivos']}\n")
            f.write(f"- **Arquivos V√°lidos:** {resultado['arquivos_validos']}/{resultado['total_arquivos']}\n")
            f.write(f"- **Taxa de Sucesso:** {(resultado['arquivos_validos']/resultado['total_arquivos']*100):.1f}%\n")
            
            if resultado['arquivos_validos'] == resultado['total_arquivos']:
                f.write(f"- **Status:** ‚úÖ PRONTO PARA PARSER\n\n")
            else:
                f.write(f"- **Status:** ‚ùå REQUER CORRE√á√ïES NO MDRIVER\n\n")
            
            if resultado['campos_faltantes']:
                f.write("## ‚ö†Ô∏è Campos Obrigat√≥rios Faltantes\n\n")
                for arquivo, campos in resultado['campos_faltantes'].items():
                    f.write(f"### {arquivo}\n")
                    for campo in campos:
                        f.write(f"- ‚ùå {campo}\n")
                    f.write("\n")
            
            if resultado['problemas']:
                f.write("## üö® Problemas Detectados\n\n")
                for problema in resultado['problemas']:
                    f.write(f"- ‚ùå {problema}\n")
                f.write("\n")
            
            f.write("## üìÅ Localiza√ß√£o dos Arquivos\n\n")
            f.write(f"**Pasta de Sa√≠da:** `{pasta_base / 'input'}`\n\n")
            f.write("Os arquivos processados est√£o dispon√≠veis na pasta `input` desta base.\n")
            
    def _gerar_relatorio_completo(self, resultado: Dict, pasta_base: Path):
        """Gera relat√≥rio completo da base"""
        # Primeiro gera o relat√≥rio r√°pido
        self._gerar_relatorio_rapido(resultado, pasta_base)
        
        # Adiciona se√ß√µes estat√≠sticas
        relatorio_path = pasta_base / f"relatorio_completo_{resultado['base']}.md"
        
        with open(relatorio_path, 'w', encoding='utf-8') as f:
            f.write(f"# Relat√≥rio Completo - Base {resultado['base']}\n\n")
            f.write(f"**Data:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"**Modo:** Processamento Completo üìä\n")
            f.write(f"**Tempo Total:** {resultado['tempo_processamento'] + resultado.get('tempo_estatisticas', 0):.2f} segundos\n\n")
            
            # Se√ß√µes do relat√≥rio r√°pido
            f.write("## üìä Resumo Executivo\n\n")
            f.write(f"- **Arquivos Processados:** {resultado['arquivos_processados']}/{resultado['total_arquivos']}\n")
            f.write(f"- **Arquivos V√°lidos:** {resultado['arquivos_validos']}/{resultado['total_arquivos']}\n")
            f.write(f"- **Taxa de Sucesso:** {(resultado['arquivos_validos']/resultado['total_arquivos']*100):.1f}%\n")
            
            # Adiciona estat√≠sticas se dispon√≠veis
            if 'estatisticas' in resultado and resultado['estatisticas']:
                f.write("\n## üìà An√°lise Estat√≠stica Detalhada\n\n")
                for arquivo, stats in resultado['estatisticas'].items():
                    f.write(f"### {arquivo}\n")
                    f.write(f"- **Registros:** {stats.get('total_registros', 'N/A')}\n")
                    f.write(f"- **Colunas:** {stats.get('total_colunas', 'N/A')}\n")
                    f.write(f"- **Campos Vazios:** {stats.get('campos_vazios', 'N/A')}\n")
                    f.write(f"- **Taxa de Preenchimento:** {stats.get('taxa_preenchimento', 'N/A')}%\n\n")
            
            if resultado.get('graficos_gerados'):
                f.write("## üìä Visualiza√ß√µes Geradas\n\n")
                for grafico in resultado['graficos_gerados']:
                    f.write(f"- {grafico}\n")
                f.write("\n")
                
    def _analisar_estatisticas_arquivo(self, arquivo_path: Path) -> Dict:
        """Analisa estat√≠sticas de um arquivo"""
        try:
            # Detecta encoding
            with open(arquivo_path, 'rb') as f:
                raw_data = f.read(1024)
                encoding = chardet.detect(raw_data)['encoding'] or 'utf-8'
            
            df = pd.read_csv(arquivo_path, encoding=encoding)
            
            stats = {
                'total_registros': len(df),
                'total_colunas': len(df.columns),
                'campos_vazios': df.isnull().sum().sum(),
                'taxa_preenchimento': ((df.size - df.isnull().sum().sum()) / df.size * 100) if df.size > 0 else 0
            }
            
            return stats
            
        except Exception as e:
            return {'erro': str(e)}
            
    def _gerar_graficos_base(self, resultado: Dict, pasta_base: Path) -> List[str]:
        """Gera gr√°ficos para a base"""
        graficos = []
        
        try:
            pasta_graficos = pasta_base / "graficos"
            pasta_graficos.mkdir(exist_ok=True)
            
            # Gr√°fico de arquivos v√°lidos vs total
            plt.figure(figsize=(10, 6))
            categorias = ['V√°lidos', 'Com Problemas']
            valores = [resultado['arquivos_validos'], 
                      resultado['total_arquivos'] - resultado['arquivos_validos']]
            cores = ['#27ae60', '#e74c3c']
            
            plt.bar(categorias, valores, color=cores)
            plt.title(f'Status dos Arquivos - Base {resultado["base"]}')
            plt.ylabel('Quantidade de Arquivos')
            
            grafico_path = pasta_graficos / "status_arquivos.png"
            plt.savefig(grafico_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            graficos.append(f"Status dos Arquivos: {grafico_path}")
            
        except Exception as e:
            self.log_status(f"‚ö†Ô∏è Erro ao gerar gr√°ficos: {e}")
            
        return graficos
        
    def _atualizar_resultado_tree(self, base: str, resultado: Dict):
        """Atualiza tree view com resultado do processamento"""
        # Encontra item da base
        for item in self.tree_bases.get_children():
            valores = self.tree_bases.item(item, 'values')
            if valores[0] == base:
                status = "‚úÖ Pronto" if resultado['arquivos_validos'] == resultado['total_arquivos'] else "‚ùå Problemas"
                observacoes = f"{len(resultado['problemas'])} problemas" if resultado['problemas'] else "OK"
                
                self.tree_bases.item(item, values=(
                    base, 
                    status, 
                    f"{resultado['arquivos_validos']}/{resultado['total_arquivos']}", 
                    resultado['total_arquivos'],
                    observacoes
                ))
                break
                
    def _detectar_inconsistencias_nomenclatura(self):
        """Detecta inconsist√™ncias de nomenclatura entre bases"""
        self.inconsistencias_nomenclatura = {}
        
        # Coleta todos os campos encontrados por arquivo
        campos_por_arquivo = {}
        
        for base, resultado in self.resultados_validacao.items():
            pasta_input = self.pasta_padrao / "output" / base / "input"
            
            for arquivo_csv in self.campos_obrigatorios.keys():
                arquivo_path = pasta_input / arquivo_csv
                
                if arquivo_path.exists():
                    try:
                        # Detecta encoding
                        with open(arquivo_path, 'rb') as f:
                            raw_data = f.read(1024)
                            encoding = chardet.detect(raw_data)['encoding'] or 'utf-8'
                        
                        df = pd.read_csv(arquivo_path, encoding=encoding, nrows=0)
                        
                        if arquivo_csv not in campos_por_arquivo:
                            campos_por_arquivo[arquivo_csv] = {}
                            
                        for coluna in df.columns:
                            if coluna not in campos_por_arquivo[arquivo_csv]:
                                campos_por_arquivo[arquivo_csv][coluna] = []
                            campos_por_arquivo[arquivo_csv][coluna].append(base)
                            
                    except Exception as e:
                        continue
        
        # Detecta inconsist√™ncias
        for arquivo_csv, campos_obrigatorios in self.campos_obrigatorios.items():
            if arquivo_csv in campos_por_arquivo:
                for campo_obrigatorio in campos_obrigatorios:
                    # Procura varia√ß√µes do campo obrigat√≥rio
                    varia√ß√µes_encontradas = []
                    
                    for campo_encontrado, bases in campos_por_arquivo[arquivo_csv].items():
                        if campo_encontrado != campo_obrigatorio and self._campos_similares(campo_obrigatorio, campo_encontrado):
                            varia√ß√µes_encontradas.append((campo_encontrado, bases))
                    
                    if varia√ß√µes_encontradas:
                        chave = f"{arquivo_csv}_{campo_obrigatorio}"
                        self.inconsistencias_nomenclatura[chave] = {
                            'arquivo': arquivo_csv,
                            'campo_obrigatorio': campo_obrigatorio,
                            'variacoes': varia√ß√µes_encontradas
                        }
        
        # Atualiza tree de inconsist√™ncias
        self._atualizar_tree_inconsistencias()
        
    def _atualizar_tree_inconsistencias(self):
        """Atualiza tree view de inconsist√™ncias"""
        # Limpa tree
        for item in self.tree_inconsistencias.get_children():
            self.tree_inconsistencias.delete(item)
        
        # Adiciona inconsist√™ncias
        for chave, inconsistencia in self.inconsistencias_nomenclatura.items():
            for variacao, bases in inconsistencia['variacoes']:
                tipo_problema = "Espa√ßamento" if inconsistencia['campo_obrigatorio'].replace(' ', '') == variacao.replace(' ', '') else "Acentua√ß√£o/Caracteres"
                
                self.tree_inconsistencias.insert('', 'end', values=(
                    inconsistencia['arquivo'],
                    inconsistencia['campo_obrigatorio'],
                    variacao,
                    ', '.join(bases),
                    tipo_problema
                ))
                
    def _mostrar_resumo_processamento(self):
        """Mostra resumo final do processamento"""
        total_bases = len(self.resultados_validacao)
        bases_prontas = sum(1 for r in self.resultados_validacao.values() 
                           if r['arquivos_validos'] == r['total_arquivos'])
        
        inconsistencias = len(self.inconsistencias_nomenclatura)
        
        resumo = f"""Processamento Conclu√≠do!

üìä Resumo Geral:
‚Ä¢ {total_bases} bases processadas
‚Ä¢ {bases_prontas} bases prontas para parser
‚Ä¢ {total_bases - bases_prontas} bases com problemas
‚Ä¢ {inconsistencias} inconsist√™ncias de nomenclatura detectadas

üìÅ Resultados salvos em:
{self.pasta_padrao / 'output'}

üéØ Pr√≥ximos Passos:
1. Gere as tabelas Excel na aba Relat√≥rios
2. Revise inconsist√™ncias de nomenclatura
3. Solicite corre√ß√µes no MDRIVER para bases com problemas"""

        messagebox.showinfo("Processamento Conclu√≠do", resumo)
        
    def processar_base_especifica(self):
        """Processa uma base espec√≠fica selecionada pelo usu√°rio"""
        if not self.bases_detectadas:
            messagebox.showerror("Erro", "Nenhuma base detectada!")
            return
            
        # Dialog para sele√ß√£o de base
        dialog = tk.Toplevel(self.root)
        dialog.title("Selecionar Base")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        tk.Label(dialog, text="Selecione a base para processar:", font=('Arial', 12)).pack(pady=10)
        
        listbox = tk.Listbox(dialog, font=('Arial', 10))
        for base in self.bases_detectadas:
            listbox.insert(tk.END, base)
        listbox.pack(fill='both', expand=True, padx=20, pady=10)
        
        def processar_selecionada():
            sele√ß√£o = listbox.curselection()
            if sele√ß√£o:
                base_selecionada = self.bases_detectadas[sele√ß√£o[0]]
                dialog.destroy()
                
                # Processa base selecionada
                thread = threading.Thread(target=self._processar_base_especifica_thread, args=(base_selecionada,))
                thread.daemon = True
                thread.start()
            else:
                messagebox.showwarning("Aviso", "Selecione uma base!")
        
        ttk.Button(dialog, text="Processar", command=processar_selecionada).pack(pady=10)
        
    def _processar_base_especifica_thread(self, base: str):
        """Thread para processar base espec√≠fica"""
        try:
            self.log_status(f"üîÑ Processando base espec√≠fica: {base}")
            
            self.progress_var.set(0)
            self.progress_label.config(text=f"Processando {base}...")
            
            if self.modo_var.get() == "rapido":
                resultado = self._processar_base_rapido(base)
            else:
                resultado = self._processar_base_completo(base)
                
            self.resultados_validacao[base] = resultado
            self._atualizar_resultado_tree(base, resultado)
            
            self.progress_var.set(100)
            self.progress_label.config(text=f"‚úÖ Base {base} processada!")
            
            self.log_status(f"‚úÖ Base {base} processada com sucesso!")
            
            messagebox.showinfo("Sucesso", f"Base {base} processada com sucesso!\n\n"
                               f"Arquivos v√°lidos: {resultado['arquivos_validos']}/{resultado['total_arquivos']}")
            
        except Exception as e:
            self.log_status(f"‚ùå Erro ao processar base {base}: {e}", "ERROR")
            messagebox.showerror("Erro", f"Erro ao processar base {base}:\n{e}")
            
    def gerar_tabela_campos_obrigatorios(self):
        """Gera tabela Excel com campos obrigat√≥rios"""
        if not self.campos_obrigatorios:
            messagebox.showerror("Erro", "Template n√£o analisado! Analise o template Excel primeiro.")
            return
            
        try:
            self.log_status("üìã Gerando tabela de campos obrigat√≥rios...")
            
            # Prepara dados para tabela
            dados_tabela = []
            
            for arquivo_csv, campos in self.campos_obrigatorios.items():
                for campo in campos:
                    linha = {
                        'Arquivo': arquivo_csv,
                        'Campo': campo,
                        'Obrigat√≥rio': 'X'
                    }
                    
                    # Adiciona colunas para cada base processada
                    for base in self.bases_detectadas:
                        if base in self.resultados_validacao:
                            # Verifica se o campo existe na base
                            pasta_input = self.pasta_padrao / "output" / base / "input"
                            arquivo_path = pasta_input / arquivo_csv
                            
                            tem_campo = "‚ùå"
                            if arquivo_path.exists():
                                try:
                                    with open(arquivo_path, 'rb') as f:
                                        raw_data = f.read(1024)
                                        encoding = chardet.detect(raw_data)['encoding'] or 'utf-8'
                                    
                                    df = pd.read_csv(arquivo_path, encoding=encoding, nrows=0)
                                    if campo in df.columns:
                                        tem_campo = "‚úÖ"
                                    else:
                                        # Verifica varia√ß√µes
                                        for coluna in df.columns:
                                            if self._campos_similares(campo, coluna):
                                                tem_campo = "‚ö†Ô∏è"
                                                break
                                except:
                                    tem_campo = "‚ùå"
                            
                            linha[f'Arquivos "{base}"'] = tem_campo
                        else:
                            linha[f'Arquivos "{base}"'] = "‚ùå"
                    
                    dados_tabela.append(linha)
            
            # Cria DataFrame
            df_tabela = pd.DataFrame(dados_tabela)
            
            # Salva Excel
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_path = self.pasta_padrao / f"tabela_campos_obrigatorios_{timestamp}.xlsx"
            
            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                df_tabela.to_excel(writer, sheet_name='Campos Obrigat√≥rios', index=False)
                
                # Formata planilha
                worksheet = writer.sheets['Campos Obrigat√≥rios']
                
                # Ajusta largura das colunas
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
            
            self.log_status(f"‚úÖ Tabela de campos obrigat√≥rios salva: {excel_path}")
            
            messagebox.showinfo("Sucesso", f"Tabela de campos obrigat√≥rios gerada!\n\n"
                               f"Arquivo: {excel_path.name}\n"
                               f"Localiza√ß√£o: {excel_path.parent}")
            
            # Pergunta se quer abrir o arquivo
            if messagebox.askyesno("Abrir Arquivo", "Deseja abrir a tabela Excel gerada?"):
                try:
                    if sys.platform == "win32":
                        os.startfile(excel_path)
                    elif sys.platform == "darwin":
                        subprocess.run(["open", excel_path])
                    else:
                        subprocess.run(["xdg-open", excel_path])
                except Exception as e:
                    messagebox.showerror("Erro", f"Erro ao abrir arquivo:\n{e}")
            
        except Exception as e:
            self.log_status(f"‚ùå Erro ao gerar tabela de campos obrigat√≥rios: {e}", "ERROR")
            messagebox.showerror("Erro", f"Erro ao gerar tabela:\n{e}")
            
    def gerar_tabela_inconsistencias(self):
        """Gera tabela Excel com inconsist√™ncias de nomenclatura"""
        if not self.inconsistencias_nomenclatura:
            messagebox.showwarning("Aviso", "Nenhuma inconsist√™ncia detectada ou processamento n√£o realizado.")
            return
            
        try:
            self.log_status("‚ö†Ô∏è Gerando tabela de inconsist√™ncias...")
            
            # Prepara dados para tabela
            dados_tabela = []
            
            for chave, inconsistencia in self.inconsistencias_nomenclatura.items():
                for variacao, bases in inconsistencia['variacoes']:
                    tipo_problema = "Espa√ßamento" if inconsistencia['campo_obrigatorio'].replace(' ', '') == variacao.replace(' ', '') else "Acentua√ß√£o/Caracteres"
                    
                    dados_tabela.append({
                        'Arquivo CSV': inconsistencia['arquivo'],
                        'Campo Obrigat√≥rio': inconsistencia['campo_obrigatorio'],
                        'Varia√ß√£o Encontrada': variacao,
                        'Bases Afetadas': ', '.join(bases),
                        'Tipo Problema': tipo_problema,
                        'Recomenda√ß√£o': f"Padronizar para: {inconsistencia['campo_obrigatorio']}"
                    })
            
            # Cria DataFrame
            df_inconsistencias = pd.DataFrame(dados_tabela)
            
            # Salva Excel
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            excel_path = self.pasta_padrao / f"tabela_inconsistencias_{timestamp}.xlsx"
            
            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                df_inconsistencias.to_excel(writer, sheet_name='Inconsist√™ncias Nomenclatura', index=False)
                
                # Formata planilha
                worksheet = writer.sheets['Inconsist√™ncias Nomenclatura']
                
                # Ajusta largura das colunas
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width
            
            self.log_status(f"‚úÖ Tabela de inconsist√™ncias salva: {excel_path}")
            
            messagebox.showinfo("Sucesso", f"Tabela de inconsist√™ncias gerada!\n\n"
                               f"Arquivo: {excel_path.name}\n"
                               f"Inconsist√™ncias encontradas: {len(dados_tabela)}\n"
                               f"Localiza√ß√£o: {excel_path.parent}")
            
            # Pergunta se quer abrir o arquivo
            if messagebox.askyesno("Abrir Arquivo", "Deseja abrir a tabela Excel gerada?"):
                try:
                    if sys.platform == "win32":
                        os.startfile(excel_path)
                    elif sys.platform == "darwin":
                        subprocess.run(["open", excel_path])
                    else:
                        subprocess.run(["xdg-open", excel_path])
                except Exception as e:
                    messagebox.showerror("Erro", f"Erro ao abrir arquivo:\n{e}")
            
        except Exception as e:
            self.log_status(f"‚ùå Erro ao gerar tabela de inconsist√™ncias: {e}", "ERROR")
            messagebox.showerror("Erro", f"Erro ao gerar tabela:\n{e}")
            
    def gerar_graficos_estatisticas(self):
        """Gera gr√°ficos e estat√≠sticas avan√ßadas"""
        if not self.resultados_validacao:
            messagebox.showwarning("Aviso", "Nenhum processamento realizado ainda.")
            return
            
        try:
            self.log_status("üìà Gerando gr√°ficos e estat√≠sticas...")
            
            # Cria pasta de gr√°ficos
            pasta_graficos = self.pasta_padrao / "graficos_gerais"
            pasta_graficos.mkdir(exist_ok=True)
            
            # Gr√°fico 1: Status das bases
            plt.figure(figsize=(12, 8))
            
            bases = list(self.resultados_validacao.keys())
            arquivos_validos = [r['arquivos_validos'] for r in self.resultados_validacao.values()]
            total_arquivos = [r['total_arquivos'] for r in self.resultados_validacao.values()]
            
            x = range(len(bases))
            width = 0.35
            
            plt.bar([i - width/2 for i in x], arquivos_validos, width, label='Arquivos V√°lidos', color='#27ae60')
            plt.bar([i + width/2 for i in x], total_arquivos, width, label='Total Arquivos', color='#3498db')
            
            plt.xlabel('Bases')
            plt.ylabel('Quantidade de Arquivos')
            plt.title('Status de Valida√ß√£o por Base')
            plt.xticks(x, bases, rotation=45)
            plt.legend()
            plt.tight_layout()
            
            grafico1_path = pasta_graficos / "status_bases.png"
            plt.savefig(grafico1_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            # Gr√°fico 2: Distribui√ß√£o de problemas
            plt.figure(figsize=(10, 6))
            
            total_problemas = sum(len(r['problemas']) for r in self.resultados_validacao.values())
            bases_com_problemas = sum(1 for r in self.resultados_validacao.values() if r['problemas'])
            bases_sem_problemas = len(self.resultados_validacao) - bases_com_problemas
            
            labels = ['Bases sem Problemas', 'Bases com Problemas']
            sizes = [bases_sem_problemas, bases_com_problemas]
            colors = ['#27ae60', '#e74c3c']
            
            plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
            plt.title('Distribui√ß√£o de Problemas nas Bases')
            plt.axis('equal')
            
            grafico2_path = pasta_graficos / "distribuicao_problemas.png"
            plt.savefig(grafico2_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            self.log_status(f"‚úÖ Gr√°ficos salvos em: {pasta_graficos}")
            
            messagebox.showinfo("Sucesso", f"Gr√°ficos e estat√≠sticas gerados!\n\n"
                               f"Localiza√ß√£o: {pasta_graficos}\n"
                               f"Arquivos gerados:\n"
                               f"‚Ä¢ status_bases.png\n"
                               f"‚Ä¢ distribuicao_problemas.png")
            
            # Pergunta se quer abrir a pasta
            if messagebox.askyesno("Abrir Pasta", "Deseja abrir a pasta com os gr√°ficos?"):
                self.abrir_pasta_graficos()
            
        except Exception as e:
            self.log_status(f"‚ùå Erro ao gerar gr√°ficos: {e}", "ERROR")
            messagebox.showerror("Erro", f"Erro ao gerar gr√°ficos:\n{e}")
            
    def abrir_pasta_resultados(self):
        """Abre pasta de resultados"""
        pasta_output = self.pasta_padrao / "output"
        pasta_output.mkdir(exist_ok=True)
        
        try:
            if sys.platform == "win32":
                os.startfile(pasta_output)
            elif sys.platform == "darwin":
                subprocess.run(["open", pasta_output])
            else:
                subprocess.run(["xdg-open", pasta_output])
                
            self.log_status(f"üìÅ Pasta de resultados aberta: {pasta_output}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir pasta:\n{e}")
            
    def abrir_pasta_logs(self):
        """Abre pasta de logs"""
        pasta_logs = Path("logs")
        pasta_logs.mkdir(exist_ok=True)
        
        try:
            if sys.platform == "win32":
                os.startfile(pasta_logs)
            elif sys.platform == "darwin":
                subprocess.run(["open", pasta_logs])
            else:
                subprocess.run(["xdg-open", pasta_logs])
                
            self.log_status(f"üìÅ Pasta de logs aberta: {pasta_logs}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir pasta:\n{e}")
            
    def abrir_pasta_graficos(self):
        """Abre pasta de gr√°ficos"""
        pasta_graficos = self.pasta_padrao / "graficos_gerais"
        pasta_graficos.mkdir(exist_ok=True)
        
        try:
            if sys.platform == "win32":
                os.startfile(pasta_graficos)
            elif sys.platform == "darwin":
                subprocess.run(["open", pasta_graficos])
            else:
                subprocess.run(["xdg-open", pasta_graficos])
                
            self.log_status(f"üìÅ Pasta de gr√°ficos aberta: {pasta_graficos}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir pasta:\n{e}")
            
    def atualizar_logs(self):
        """Atualiza √°rea de logs"""
        try:
            # L√™ logs mais recentes
            log_dir = Path("logs")
            if log_dir.exists():
                log_files = list(log_dir.glob("validador_v8_*.log"))
                if log_files:
                    log_file = max(log_files, key=lambda x: x.stat().st_mtime)
                    
                    with open(log_file, 'r', encoding='utf-8') as f:
                        conteudo = f.read()
                        
                    self.logs_text.delete(1.0, tk.END)
                    self.logs_text.insert(1.0, conteudo)
                    self.logs_text.see(tk.END)
                    
                    self.log_status("üîÑ Logs atualizados")
                else:
                    self.logs_text.delete(1.0, tk.END)
                    self.logs_text.insert(1.0, "Nenhum log encontrado.")
            else:
                self.logs_text.delete(1.0, tk.END)
                self.logs_text.insert(1.0, "Pasta de logs n√£o encontrada.")
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao atualizar logs:\n{e}")
            
    def limpar_logs(self):
        """Limpa logs do sistema"""
        if messagebox.askyesno("Confirmar", "Deseja realmente limpar todos os logs?"):
            try:
                self.logs_text.delete(1.0, tk.END)
                
                # Remove arquivos de log
                log_dir = Path("logs")
                if log_dir.exists():
                    for log_file in log_dir.glob("*.log"):
                        log_file.unlink()
                        
                self.log_status("üóëÔ∏è Logs limpos")
                messagebox.showinfo("Sucesso", "Logs limpos com sucesso!")
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao limpar logs:\n{e}")
                
    def exportar_logs(self):
        """Exporta logs para arquivo"""
        try:
            conteudo_logs = self.logs_text.get(1.0, tk.END)
            
            if not conteudo_logs.strip():
                messagebox.showwarning("Aviso", "Nenhum log para exportar.")
                return
                
            arquivo = filedialog.asksaveasfilename(
                title="Exportar Logs",
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            
            if arquivo:
                with open(arquivo, 'w', encoding='utf-8') as f:
                    f.write(conteudo_logs)
                    
                self.log_status(f"üíæ Logs exportados: {arquivo}")
                messagebox.showinfo("Sucesso", f"Logs exportados para:\n{arquivo}")
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao exportar logs:\n{e}")
            
    def executar(self):
        """Executa o sistema"""
        try:
            self.log_status("üöÄ Sistema de Valida√ß√£o v8.0 Otimizado iniciado")
            self.root.mainloop()
        except Exception as e:
            logging.error(f"Erro fatal: {e}")
            messagebox.showerror("Erro Fatal", f"Erro fatal no sistema:\n{e}")

def main():
    """Fun√ß√£o principal"""
    try:
        print("üöÄ Iniciando Sistema de Valida√ß√£o de Dados Log√≠sticos v8.0...")
        print("‚ö° Vers√£o Otimizada com Processamento R√°pido/Completo")
        print("üéØ Interface com Guia Visual de Prioridades")
        print()
        
        app = ValidadorLogisticoOtimizado()
        app.executar()
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar sistema: {e}")
        input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()

